#!/usr/bin/php
<?php

// Function to generate entropy
function generateEntropy($length = 256) {
    $urandom = fopen('/dev/urandom', 'r');
    $bytes = fread($urandom, $length/8);
    fclose($urandom);
    return str_pad(gmp_strval(gmp_init(bin2hex($bytes), 16), 2), $length, "0", STR_PAD_LEFT);
}

// Function to convert entropy to mnemonic
function entropyToMnemonic($entropy) {
    $size = strlen($entropy) / 32;
    $hex = str_pad(gmp_strval(gmp_init($entropy, 2), 16), strlen($entropy)/8*2, "0", STR_PAD_LEFT);
    $hash = hash("sha256", hex2bin($hex));
    $checksum = substr(str_pad(gmp_strval(gmp_init($hash, 16), 2), 256, "0", STR_PAD_LEFT), 0, $size);
    $pieces = str_split($entropy.$checksum, 11);
    $wordlist = file("wordlist.txt", FILE_IGNORE_NEW_LINES);
    $words = [];
    foreach ($pieces as $piece) {
        $i = bindec($piece);
        $words[] = $wordlist[$i];
    }
    return implode(" ", $words);
}

// Function to generate seed from mnemonic
function mnemonicToSeed($mnemonic, $passphrase = "") {
    return bin2hex(hash_pbkdf2("sha512", $mnemonic, "mnemonic".$passphrase, 2048, 64, true));
}

// Generate entropy
$entropy = generateEntropy();
echo "Entropy: $entropy\n";

// Convert entropy to mnemonic
$wordlist = file("wordlist.txt", FILE_IGNORE_NEW_LINES);
$mnemonic = entropyToMnemonic($entropy);
echo "Mnemonic: $mnemonic\n";

// Generate seed from mnemonic
$seed = mnemonicToSeed($mnemonic);
echo "Seed: $seed\n";
